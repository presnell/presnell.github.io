<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recent &amp; Upcoming Talks | Brett Presnell</title>
    <link>https://presnell.github.io/talk/</link>
      <atom:link href="https://presnell.github.io/talk/index.xml" rel="self" type="application/rss+xml" />
    <description>Recent &amp; Upcoming Talks</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 11 Jan 2024 14:05:46 -0500</lastBuildDate>
    <image>
      <url>https://presnell.github.io/images/icon_hu80eeec5b7631200ca7b388ae8cc10e3e_17874_512x512_fill_lanczos_center_2.png</url>
      <title>Recent &amp; Upcoming Talks</title>
      <link>https://presnell.github.io/talk/</link>
    </image>
    
    <item>
      <title>MBL2 2023: A Closer Look</title>
      <link>https://presnell.github.io/talk/mbl/</link>
      <pubDate>Thu, 11 Jan 2024 14:05:46 -0500</pubDate>
      <guid>https://presnell.github.io/talk/mbl/</guid>
      <description>&lt;p&gt;The morons betting league (MBL2) is a small informal group of friends
(morons) who compete every week by picking ten football bets (NCAAF
and NFL) totaling 100 &amp;ldquo;units&amp;rdquo; against the spread and/or over-under
Here&amp;rsquo;s a small sample of the data. Note that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The players (morons) are represented by one-letter codes.&lt;/li&gt;
&lt;li&gt;Some weeks may not have happened yet, so you may see a lot of
missing (NA) data.&lt;/li&gt;
&lt;li&gt;There is one exceptional (bowl) week where the morons place 20 bets
totalling 200 units. Note also that one moron placed 10 bets
totalling 200 units that week, which is technically against the
&amp;ldquo;rules&amp;rdquo; of the MBL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mia&lt;/code&gt; is an indicator of whether the moron failed to enter their
picks. According to the MBL2 &amp;ldquo;rules&amp;rdquo; a player is allowed to have one
missed week replaced by their score from the subsequent week. The
&amp;ldquo;rules&amp;rdquo; do not specify what happens if the week missed or the week
following the week missed is the 20-bet week.&lt;/li&gt;
&lt;li&gt;The listing of the teams/games and the line is very irregular
because these are emailed and entered by hand with no
standardization. For this reason, the league inforamtion (NCAAF vs
NFL) is also unavailable. So the only useful data are the moron,
week, number of units wagered, and number of units won.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl |&amp;gt;
    select(-cells) |&amp;gt;
    slice_sample(n = 10) |&amp;gt;
    arrange(week, moron)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 10 × 7
   moron  week mia   team_s                         line      wager units_won
   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;                          &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
 1 K         0 FALSE uscar                          2.5          10         0
 2 P         3 FALSE FSU @ CLEM                     OVER 55.0    10         5
 3 P         3 FALSE NE @ NYJ                       NYJ +3.0     10         0
 4 P         7 FALSE (17) Duke at (4) Florida State FSU -13.5    20        20
 5 D         8 FALSE Horns                          -17.5        20        20
 6 W         9 FALSE kssu/UTEX                      &amp;gt;50.5        10        10
 7 K        11 FALSE MIA                            -11.5        10         0
 8 S        11 FALSE Clemson                        -6.5         10        10
 9 D        14 FALSE Army                           -2.5         10        10
10 S        17 FALSE LV                             3            10         5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next bit of code creates a result column (win, lose, or push) the
wager and units_won columns.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl &amp;lt;- mbl |&amp;gt;
    mutate(
        result = (units_won == wager) - (units_won == 0) + 2,
        result = ifelse(is.na(result), 4, result),
        result = c(&amp;quot;lose&amp;quot;, &amp;quot;push&amp;quot;, &amp;quot;win&amp;quot;, NA)[result]) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;The next bit of code creates a summary data frame of results by moron
and week. It uses &lt;code&gt;tidyr::fill()&lt;/code&gt; to backfill the units won for weeks
where &lt;code&gt;mia == TRUE&lt;/code&gt;. The variable &lt;code&gt;units_won10&lt;/code&gt; adjusts the number of
units won to a 10-bet basis, in order to standardize the 20-bet bowl
week to match the other weeks.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl_by_moron_week &amp;lt;- mbl |&amp;gt;
    summarize(
        n_bets = n(),
        wins = sum(result == &amp;quot;win&amp;quot;),
        losses = sum(result == &amp;quot;lose&amp;quot;),
        pushes = sum(result == &amp;quot;push&amp;quot;),
        units_won = sum(units_won),
        .by = c(moron, week, mia)
    ) |&amp;gt;
    ## Handle MIA weeks with tidyr::fill().
    arrange(moron, week) |&amp;gt;    # Making sure that observations are ordered correctly.
    group_by(moron) |&amp;gt;         # Grouping means filling done only within group (by moron).
    fill(units_won, .direction = &amp;quot;up&amp;quot;) |&amp;gt;
    ungroup() |&amp;gt;
    filter(!is.na(units_won)) |&amp;gt;
    mutate(units_won10 = (10/n_bets) * units_won) |&amp;gt;
    mutate(season_total = cumsum(units_won), .by = moron)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;Here are some quantiles of the weekly units won (10-bet basis) by the
morons. This is an attempt to determine what constitutes a good or
bad weekly total.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl_by_moron_week |&amp;gt;
    pull(units_won10) |&amp;gt;
    quantile(probs = seq(0.1, 0.9, by = 0.1))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;10% 20% 30% 40% 50% 60% 70% 80% 90% 
 30  40  40  45  50  57  60  67  75 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is a histogram of the same information.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Histogram of weekly units won by the morons.
mbl_by_moron_week |&amp;gt;
    ggplot(aes(x = units_won10)) +
    geom_histogram(binwidth = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&#34;index.markdown_strict_files/figure-markdown_strict/hist-weekly-totals-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a line plot of the moron&amp;rsquo;s season totals by week.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl_by_moron_week |&amp;gt;
    ggplot(aes(x = week, y = season_total,
               color = fct_reorder2(moron, week, season_total))) +
    geom_line(linewidth = 1) +
    labs(color = &amp;quot;moron&amp;quot;, x = &amp;quot;Week&amp;quot;, y = &amp;quot;Season Total&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&#34;index.markdown_strict_files/figure-markdown_strict/moron_cum_totals-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How many weeks has each moron been one of the top scorers?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl_by_moron_week |&amp;gt;
    group_by(week) |&amp;gt;
    mutate(
        week_max = max(units_won),
        top_scorer = (units_won == week_max)
    ) |&amp;gt;
    ungroup() |&amp;gt;
    filter(top_scorer) |&amp;gt;
    summarize(n = n(), .by = moron) |&amp;gt;
    arrange(desc(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 2
  moron     n
  &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
1 H         5
2 K         5
3 W         5
4 P         4
5 S         4
6 D         3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which moron&amp;rsquo;s weekly totals (10-bet basis) are the most (and least)
variable (ordered by standard deviation)?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl_by_moron_week |&amp;gt;
    summarize(mean = mean(units_won10), sd = sd(units_won10),
              median = median(units_won10), mad = mad(units_won10),
              .by = moron) |&amp;gt;
    arrange(desc(sd))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 5
  moron  mean    sd median   mad
  &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 W      51.8  20.2     50 14.8 
2 K      49.6  18.3     50 22.2 
3 P      56.2  16.1     55 22.2 
4 H      51.4  16.1     50 14.8 
5 D      55.7  15.6     55 22.2 
6 S      49.9  14.6     40  7.41
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which moron&amp;rsquo;s weekly totals are the most (and least) variable (ordered
by median absolute deviation)? Using &lt;code&gt;knitr::kable()&lt;/code&gt; here for a
prettier table, but I&amp;rsquo;m getting misaligned column headers. I may
report this as a bug.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl_by_moron_week |&amp;gt;
    summarize(
        mean = mean(units_won10), sd = sd(units_won10),
        median = median(units_won10), mad = mad(units_won10),
        .by = moron) |&amp;gt;
    arrange(desc(mad), desc(sd)) |&amp;gt;
    kable()
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;moron&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;median&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mad&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;K&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.60526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.33832&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.239&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;P&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;56.18421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.12384&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.239&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;D&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.65789&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.63121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.239&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.84211&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.22172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.826&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;H&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.44737&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.07957&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.826&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;S&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.86842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.63618&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.413&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Overall number of winning, losing, and pushed wagers for each moron.
The stated win percentage counts pushes as half a win.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl |&amp;gt;
    filter(!is.na(result)) |&amp;gt;
    summarize(n = n(), .by = c(moron, result)) |&amp;gt;
    pivot_wider(names_from = result, values_from = n, values_fill = 0) |&amp;gt;
    mutate(
        n = win + push + lose,
        win_pct = 100 * (win + 0.5*push) / n) |&amp;gt;
    relocate(n, win, lose, push, .after = moron) |&amp;gt;
    arrange(desc(win_pct))
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 6
  moron     n   win  lose  push win_pct
  &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
1 P       200   109    88     3    55.2
2 D       200   108    88     4    55  
3 W       200   103    96     1    51.8
4 S       200    98    97     5    50.2
5 H       190    91    94     5    49.2
6 K       180    84    92     4    47.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do these morons know what they&amp;rsquo;re doing when they wager different
amounts? The overall number of winning, losing, and pushed wagers by
units wagered.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl |&amp;gt;
    filter(!is.na(result)) |&amp;gt;
    summarize(n = n(), .by = c(wager, result)) |&amp;gt;
    pivot_wider(names_from = result, values_from = n, values_fill = 0) |&amp;gt;
    mutate(
        n = win + push + lose,
        win_pct = 100 * (win + 0.5*push) / n) |&amp;gt;
    relocate(n, win, lose, push, .after = wager) |&amp;gt;
    arrange(wager)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 6
  wager     n   win  lose  push win_pct
  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
1     5   104    51    50     3    50.5
2    10   996   507   472    17    51.8
3    15    16     4    11     1    28.1
4    20    54    31    22     1    58.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The overall percentages of winning, losing, and pushed wagers by units
wagered.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl |&amp;gt;
    filter(!is.na(result)) |&amp;gt;
    summarize(n = n(), .by = c(wager, result)) |&amp;gt;
    pivot_wider(names_from = result, values_from = n, values_fill = 0) |&amp;gt;
    mutate(
        n = win + push + lose,
        win = 100*win/n,
        push = 100*push/n,
        lose = 100*lose/n
    ) |&amp;gt;
    relocate(n, win, lose, push, .after = wager) |&amp;gt;
    arrange(wager)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 5
  wager     n   win  lose  push
  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     5   104  49.0  48.1  2.88
2    10   996  50.9  47.4  1.71
3    15    16  25    68.8  6.25
4    20    54  57.4  40.7  1.85
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The overall percentages of wining, losing, and pushed wagers by units
wagered for the individual morons. Note that some morons only ever bet
in 10-unit increments.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Code&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mbl |&amp;gt;
    filter(!is.na(result)) |&amp;gt;
    summarize(n = n(), .by = c(moron, wager, result)) |&amp;gt;
    pivot_wider(names_from = result, values_from = n, values_fill = 0) |&amp;gt;
    mutate(
        n = win + push + lose,
        win_pct = 100 * (win + 0.5*push) / n) |&amp;gt;
    relocate(n, win, lose, push, .after = wager) |&amp;gt;
    arrange(moron, wager) |&amp;gt;
    print(n = Inf)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 17 × 7
   moron wager     n   win  lose  push win_pct
   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
 1 D         5    17     6    10     1    38.2
 2 D        10   174    99    72     3    57.8
 3 D        15     1     0     1     0     0  
 4 D        20     8     3     5     0    37.5
 5 H         5    40    17    21     2    45  
 6 H        10   128    63    62     3    50.4
 7 H        15     4     1     3     0    25  
 8 H        20    18    10     8     0    55.6
 9 K         5     6     3     3     0    50  
10 K        10   161    74    84     3    46.9
11 K        20    13     7     5     1    57.7
12 P         5    41    25    16     0    61.0
13 P        10   133    70    61     2    53.4
14 P        15    11     3     7     1    31.8
15 P        20    15    11     4     0    73.3
16 S        10   200    98    97     5    50.2
17 W        10   200   103    96     1    51.8
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
